"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6024],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var u=r.createContext({}),l=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=l(t.components);return r.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,u=t.parentName,s=p(t,["components","mdxType","originalType","parentName"]),m=l(n),d=i,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,a(a({ref:e},s),{},{components:n})):r.createElement(f,a({ref:e},s))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=t,p.mdxType="string"==typeof t?t:i,a[1]=p;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2232:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],p={},u=void 0,l={unversionedId:"Basic Operations/dot_multiply",id:"Basic Operations/dot_multiply",title:"dot_multiply",description:"dot_multiply(input1 any[] | Mat | Tensor)",source:"@site/math/Basic Operations/dot_multiply.mdx",sourceDirName:"Basic Operations",slug:"/Basic Operations/dot_multiply",permalink:"/math/Basic Operations/dot_multiply",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dot_divide",permalink:"/math/Basic Operations/dot_divide"},next:{title:"factorial",permalink:"/math/Basic Operations/factorial"}},s={},c=[{value:"<code>dot_multiply(input1: any[] | Mat | Tensor, input2: any[] | Mat | Tensor)</code>",id:"dot_multiplyinput1-any--mat--tensor-input2-any--mat--tensor",level:4}],m={toc:c};function d(t){var e=t.components,n=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"dot_multiplyinput1-any--mat--tensor-input2-any--mat--tensor"},(0,o.kt)("inlineCode",{parentName:"h4"},"dot_multiply(input1: any[] | Mat | Tensor, input2: any[] | Mat | Tensor)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"input1")," first input, the first multiplicand"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"input2")," second input, the second multiplicand"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"returns: any[] | Mat | Tensor")," - A copy of the structure multiplied ",(0,o.kt)("strong",{parentName:"p"},"element-wise")," (Note: this is not a standard multiplication of matrices), similar to dot_divide"),(0,o.kt)("p",null,"This function, similar to dot_divide, takes two structures of the same sizes, divides the elements element-wise, and returns it:"),(0,o.kt)("iframe",{src:"https://hlab.app/s/docs/dot_multiply_hbook",width:"100%",height:"500px"}))}d.isMDXComponent=!0}}]);